NAME
    Tags::HTML::Pre - Tags helper for gradient evaluation.

SYNOPSIS
     use Tags::HTML::Pre;

     my $obj = Tags::HTML::Pre->new(%params);
     $obj->process($stars_hr);
     $obj->process_css;

METHODS
  "new"
     my $obj = Tags::HTML::Pre->new(%params);

    Constructor.

    *       "css"

            'CSS::Struct::Output' object for process_css processing.

            It's required.

            Default value is undef.

    *       "css_background_image"

            CSS parameter for background-image of gradient.

            Default value is 'linear-gradient(to right, red, orange, yellow,
            green, blue, indigo, violet)'.

    *       "css_gradient_class"

            CSS class name for gradient.

            Default value is 'gradient'.

    *       "height"

            Indicator height.

            Default value is 30.

    *       "unit"

            Unit for height and width.

            Default value is 'px'.

    *       "width"

            Indicator width.

            Default value is 500.

    *       "tags"

            'Tags::Output' object.

            Default value is undef.

  "process"
     $obj->process($percent_value);

    Process Tags structure for gradient.

    Returns undef.

  "process_css"
     $obj->process_css;

    Process CSS::Struct structure for output.

    Returns undef.

ERRORS
     new():
             From Tags::HTML::new():
                     Parameter 'css' must be a 'CSS::Struct::Output::*' class.
                     Parameter 'tags' must be a 'Tags::Output::*' class.
                     Unknown parameter '%s'.

EXAMPLE
     use strict;
     use warnings;

     use CSS::Struct::Output::Indent;
     use Tags::HTML::Pre;
     use Tags::Output::Indent;

     # Object.
     my $css = CSS::Struct::Output::Indent->new;
     my $tags = Tags::Output::Indent->new(
             'preserved' => 'pre',
     );
     my $obj = Tags::HTML::Pre->new(
             'css' => $css,
             'tags' => $tags,
     );

     # Process indicator.
     $obj->process(<<'END');
     foo
       bar
         baz
     END

     # Print out.
     print "HTML\n";
     print $tags->flush."\n";

     # Output:
     # HTML
     # TODO

DEPENDENCIES
    Tags::HTML.

SEE ALSO
    Tags::HTML::Stars
        Tags helper for stars evaluation.

REPOSITORY
    <https://github.com/michal-josef-spacek/Tags-HTML-Pre>

AUTHOR
    Michal Josef Špaček <mailto:skim@cpan.org>

    <http://skim.cz>

LICENSE AND COPYRIGHT
    © 2021-2022 Michal Josef Špaček

    BSD 2-Clause License

VERSION
    0.01

